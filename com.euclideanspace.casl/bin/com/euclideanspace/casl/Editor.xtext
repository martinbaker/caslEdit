grammar com.euclideanspace.casl.Editor hidden(WS,ML_COMMENT,ML_COMMENT2,ML_COMMENT3,SL_COMMENT)

generate editor "http://www.euclideanspace.com/casl/Editor"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	basicSpec=BasicSpec;
	
BasicSpec:
	('%implies'? &
	('library' name1=ID ('/' name2+=ID)* )? &
	('version' name3=INT ('.' name4+=INT)*)? &
/*	('%authors' RESTLINE)? &
	('%date' RESTLINE)? &
	('%display' RESTLINE)* &
	('%left_assoc' RESTLINE)* &
	('%number' RESTLINE)* &
	('%floating' RESTLINE)* &*/
	AUTHORS? &
    DATE? &
    DISPLAY* &
    LEFTASSOC? &
    NUMBER? &
    FLOATING? &
    PREC1* &
	PREC*)
	'spec' name=ID '=' 
	(basicItems += BasicItems+ | empty='{''}');

BasicItems:
	('%mono'? &
	'%implies'? )	
	(
	s=SigItems |
	=>('free' ('type'|'types')
       datatypeDecl=DatatypeDecl
       (';' datatypeDecl2 += DatatypeDecl)* ';'?)|
	('generated' ('type'|'types')
       datatypeDecl=DatatypeDecl
       (';' datatypeDecl2 += DatatypeDecl)* ';'?)|
	('generated' '{' s2+=SigItems+ '}' ';'?)|
	(('var'|'vars') varDecl = VarDecl
       (';' varDecl2 += VarDecl )* ';'?) |
	('forall' varDecl = VarDecl
       (';' varDecl2 += VarDecl )*
       '.' formula = Formula
       (';' formula2 += Formula )* ';'?)
    )
	;

SigItems:
	(('sort'|'sorts')
       sortItem=SortItem
       (';' sortItem2 += SortItem)* ';'?)|
	(('op'|'ops')
       opItem=OpItem
       (';' opItem2 += OpItem)* ';'?)|
	(('pred'|'preds')
       predItem=PredItem
       (';' predItem2 += PredItem)* ';'?)|
	(('type'|'types')
       datatypeDecl=DatatypeDecl
       (';' datatypeDecl2 += DatatypeDecl)* ';'?)
    ;
    
SortItem:
	'%implies'? sort=Sort
       (',' sort2 += Sort)* ;

OpItem:
	'%implies'?
    (
	(opName=OpName
       (',' opName2 += OpName)* ':' opType=OpType
       (',' opAttr += OpAttr)*) |
	(opName=OpName
       opHead=OpHead '=' term=Term)
    )
    ;

/* The type of an operation would be something like:
 * Nat -> Nat
 * that is, a function type
 */
OpType:
	('?')? sort = Sort |
	sort = Sort ('*' sort2+=Sort)* '->' ('?')? sort3 = Sort;

OpAttr:
	op='assoc'|op='comm'|op='idem'|op='unit' term=Term;

OpHead:
	(':' ('?')? sort = Sort) |
	argDecl=ArgDecl (';' argDecl2+=ArgDecl)* ':' ('?')? sort = Sort
    ;

ArgDecl:
	var = Var (';' var2 += Var )* ':' sort=Sort;

PredItem:
	'%implies'?
	(
	(predName=PredName (',' predName2 += PredName )*
	':' predType += PredType) |
	(predName=PredName predHead=PredHead? '<=>' formula=Formula)
	);

PredType:
	sort=Sort
       ('*' sort2 += Sort)* | b='(' ')'
    ;

PredHead:
	'(' argDecl=ArgDecl (';' argDecl2+=ArgDecl)* ')';

/* a number of alternative function calls separated
 * by vertical bars
 */
DatatypeDecl:
	Sort '::=' alternative=Alternative ('|' alternative2+=Alternative)*;

/* a function calls separated containing function name and
 * optionally parameters
 */
Alternative:
	opName=OpName // ID
    ('(' component=Component ')' '?'?)?
    ;

/* function parameter or parameters separated by
 * commas
 */
Component:
	(opName=OpName (',' opName2 += OpName)* ':' '?'?)
    sort=Sort;

VarDecl:
	var=Var (',' var2 += Var)* ':'
    sort=Sort;

/*The following LALR(1) rule is converted to xtext format
FORMULA ::= QUANTIFIER VAR-DECL ;...; VAR-DECL '.' FORMULA
            | FORMULA /\ FORMULA /\.../\ FORMULA
            | FORMULA \/ FORMULA \/...\/ FORMULA
            | FORMULA => FORMULA
            | FORMULA if FORMULA
            | FORMULA <=> FORMULA
            | not FORMULA
            | true | false
            | def TERM
            | TERM =e= TERM
            | TERM = TERM
            | (FORMULA)
            | MISFIX...MISFIX
 */

Formula returns Formu:
	// option below causes recursive rule invocations
	//(quantifier=Quantifier varDecl=VarDecl
    //       (';' varDecl2+=VarDecl)* '.')?
    formula = FormulaAnd
    ;

FormulaAnd returns Formu:
   FormulaOr
  ({FormulaAnd.left=current} op='/\\' right = FormulaOr)*
   ;

FormulaOr returns Formu:
   FormulaImplies
  ({FormulaOr.left=current} op='\\/' right = FormulaImplies)*
   ;

FormulaImplies returns Formu:
   FormulaIf
  ({FormulaImplies.left=current} op='=>' right = FormulaIf)?
   ;

FormulaIf returns Formu:
   FormulaEquiv
  ({FormulaIf.left=current} op='if' right = FormulaEquiv)?
   ;

FormulaEquiv returns Formu:
   FormulaUnary
  ({FormulaEquiv.left=current} op='<=>' right = FormulaUnary)?
   ;

FormulaUnary returns Formu:
  // option below causes: Decision can match input
  // such as "'/\\'" using multiple alternatives
  //(uop='not' expr=Formula) |
  e3='true' | e3='false' |
  (e3='def' t=Term) |
  (t=Term e3='=e=' t2=Term) //|
//  (t=Term e3='=' t2=Term) |
//  (e3='(' form=Formula ')') |
//  (misfix=Misfix (misfix2+=Misfix)*)
;

Quantifier:
	q='forall'|q='exists'|q='exists!';

Terms:
	term=Term (',' term2+=Term)*;

Term:
	misfix=Misfix (misfix2+=Misfix)*;

/*
The following LALR(1) rule is converted to xtext format
MISFIX ::= TOKEN | LITERAL | PLACE
         | QUAL-PRED-NAME | QUAL-VAR-NAME | QUAL-OP-NAME
         | TERM : SORT
         | TERM when FORMULA else TERM
         | (TERMS)
         | [TERMS] | []
         | {TERMS} | {}
*/
Misfix returns Mfix:
	MisfixWhen 
	({Misfix.left=current} op=':' sort=Sort)?
	;

MisfixWhen returns Mfix:
	MisfixUnary 
//	({MisfixWhen.left=current} op='when' formula=Formula op0='when' right=MisfixUnary)?
	;

MisfixUnary returns Mfix:
	'(' misfix=Misfix ')' |
	'[' misfix=Misfix ']' |
	'{' misfix=Misfix '}' |
	op1=Token | op2=Literal | op3=Place |
	op4=QualPredName | op5=QualVarName |
	op6=QualOpName | op='[' ']' | op='{' '}'
	;

QualPredName:
	'(' 'var' Var ':' sort=Sort ')';

QualVarName:
	'(' 'pred' PredName ':' predType=PredType ')';

QualOpName:
	'(' 'op' OpName ':' opType=OpType ')';

Sort:
	name=ID;

/* the name of an operation can be +,*,! or alpha
 * or numeric
 */
OpName:
	prefix=Place?
	(name=ID | num=INT |op='!'|op='+'|op='-'|op='*'|op='/'
		|op='-!'|op='-+'|op='--'|op='-*'|op='-/'|op='-^'|op='-?'
		|op='+!'|op='++'|op='+-'|op='+*'|op='+/'|op='+^'|op='+?'
		|op='/!'|op='/+'|op='/-'|op='//'|op='/^'|op='/?'
		|op='*!'|op='*+'|op='*-'|op='**'|op='*^'|op='*?'
		|op='^'|op='@'|op='@@'
	)
	suffix=Place?
	// Rule ruleOpItem has non-LL(*) decision due to recursive rule invocations reachable from alts 1,2.
    // Resolve by left-factoring or using syntactic predicates
	// =>('(' opItem=OpItem ')')?
	=>('(' opName=ID ':' opType=OpType
		(';' opName2+=ID ':' opType2+=OpType)*
	')')?
	;

/* predicate name can be something like: '<','>=','<='
 * and so on
 */
PredName:
	prefix=Place?
	(name=ID|op='<'|op='<='|op='=<'|op='='
	       |op='>'|op='>='|op='=>')
	suffix=Place?
	;
	
Var:
	name=ID;
	
Token:
	name=ID | num=INT | (name=ID '.' t=Token);

Literal:
	str=STRING /*| num=INT*/;

Place:
	'__';



terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING :
'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
;
terminal ML_COMMENT : '%{' -> '}%';
terminal ML_COMMENT2 : '%[' -> ']%';
terminal ML_COMMENT3 : '%(' -> ')%';
terminal PREC : '%prec(' -> ')%';
terminal SL_COMMENT : '%%' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
//terminal RESTLINE : !('\n'|'\r')* ('\r'? '\n')?;
terminal AUTHORS :'%authors' !('\n'|'\r')* ('\r'? '\n')?;
terminal DATE :'%date' !('\n'|'\r')* ('\r'? '\n')?;
terminal DISPLAY :'%display' !('\n'|'\r')* ('\r'? '\n')?;
terminal LEFTASSOC :'%left_assoc' !('\n'|'\r')* ('\r'? '\n')?;
terminal NUMBER :'%number' !('\n'|'\r')* ('\r'? '\n')?;
terminal FLOATING :'%floating' !('\n'|'\r')* ('\r'? '\n')?;
terminal PREC1 :'%prec' !('\n'|'\r')* ('\r'? '\n')?;

terminal ANY_OTHER: .;




	