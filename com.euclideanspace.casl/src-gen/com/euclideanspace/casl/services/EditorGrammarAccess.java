/*
* generated by Xtext
*/

package com.euclideanspace.casl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class EditorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cBasicSpecAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBasicSpecBasicSpecParserRuleCall_0 = (RuleCall)cBasicSpecAssignment.eContents().get(0);
		
		//Model:
		//	basicSpec=BasicSpec;
		public ParserRule getRule() { return rule; }

		//basicSpec=BasicSpec
		public Assignment getBasicSpecAssignment() { return cBasicSpecAssignment; }

		//BasicSpec
		public RuleCall getBasicSpecBasicSpecParserRuleCall_0() { return cBasicSpecBasicSpecParserRuleCall_0; }
	}

	public class BasicSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasicItemsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBasicItemsBasicItemsParserRuleCall_0_0 = (RuleCall)cBasicItemsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cEmptyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cEmptyLeftCurlyBracketKeyword_1_0_0 = (Keyword)cEmptyAssignment_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BasicSpec:
		//	basicItems+=BasicItems+ | empty="{" "}";
		public ParserRule getRule() { return rule; }

		//basicItems+=BasicItems+ | empty="{" "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//basicItems+=BasicItems+
		public Assignment getBasicItemsAssignment_0() { return cBasicItemsAssignment_0; }

		//BasicItems
		public RuleCall getBasicItemsBasicItemsParserRuleCall_0_0() { return cBasicItemsBasicItemsParserRuleCall_0_0; }

		//empty="{" "}"
		public Group getGroup_1() { return cGroup_1; }

		//empty="{"
		public Assignment getEmptyAssignment_1_0() { return cEmptyAssignment_1_0; }

		//"{"
		public Keyword getEmptyLeftCurlyBracketKeyword_1_0_0() { return cEmptyLeftCurlyBracketKeyword_1_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}

	public class BasicItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicItems");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSSigItemsParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cFreeKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cTypeKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cTypesKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cDatatypeDeclAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDatatypeDeclDatatypeDeclParserRuleCall_1_0_2_0 = (RuleCall)cDatatypeDeclAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cDatatypeDecl2Assignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cDatatypeDecl2DatatypeDeclParserRuleCall_1_0_3_1_0 = (RuleCall)cDatatypeDecl2Assignment_1_0_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGeneratedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cTypeKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cTypesKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Assignment cDatatypeDeclAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDatatypeDeclDatatypeDeclParserRuleCall_2_2_0 = (RuleCall)cDatatypeDeclAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cSemicolonKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cDatatypeDecl2Assignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cDatatypeDecl2DatatypeDeclParserRuleCall_2_3_1_0 = (RuleCall)cDatatypeDecl2Assignment_2_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cGeneratedKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cS2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cS2SigItemsParserRuleCall_3_2_0 = (RuleCall)cS2Assignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cVarKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cVarsKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Assignment cVarDeclAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVarDeclVarDeclParserRuleCall_4_1_0 = (RuleCall)cVarDeclAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cVarDecl2Assignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cVarDecl2VarDeclParserRuleCall_4_2_1_0 = (RuleCall)cVarDecl2Assignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cForallKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVarDeclAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVarDeclVarDeclParserRuleCall_5_1_0 = (RuleCall)cVarDeclAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cVarDecl2Assignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cVarDecl2VarDeclParserRuleCall_5_2_1_0 = (RuleCall)cVarDecl2Assignment_5_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cFormulaAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cFormulaFormulaParserRuleCall_5_4_0 = (RuleCall)cFormulaAssignment_5_4.eContents().get(0);
		private final Group cGroup_5_5 = (Group)cGroup_5.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_5_0 = (Keyword)cGroup_5_5.eContents().get(0);
		private final Assignment cFormula2Assignment_5_5_1 = (Assignment)cGroup_5_5.eContents().get(1);
		private final RuleCall cFormula2FormulaParserRuleCall_5_5_1_0 = (RuleCall)cFormula2Assignment_5_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		
		//BasicItems:
		//	s=SigItems | => ("free" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?) |
		//	"generated" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"? | "generated" "{"
		//	s2+=SigItems+ "}" ";"? | ("var" | "vars") varDecl=VarDecl (";" varDecl2+=VarDecl)* ";"? | "forall" varDecl=VarDecl
		//	(";" varDecl2+=VarDecl)* "." formula=Formula (";" formula2+=Formula)* ";"?;
		public ParserRule getRule() { return rule; }

		//s=SigItems | => ("free" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?) |
		//"generated" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"? | "generated" "{"
		//s2+=SigItems+ "}" ";"? | ("var" | "vars") varDecl=VarDecl (";" varDecl2+=VarDecl)* ";"? | "forall" varDecl=VarDecl (";"
		//varDecl2+=VarDecl)* "." formula=Formula (";" formula2+=Formula)* ";"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//s=SigItems
		public Assignment getSAssignment_0() { return cSAssignment_0; }

		//SigItems
		public RuleCall getSSigItemsParserRuleCall_0_0() { return cSSigItemsParserRuleCall_0_0; }

		//=> ("free" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?)
		public Group getGroup_1() { return cGroup_1; }

		//"free" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"free"
		public Keyword getFreeKeyword_1_0_0() { return cFreeKeyword_1_0_0; }

		//"type" | "types"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//"type"
		public Keyword getTypeKeyword_1_0_1_0() { return cTypeKeyword_1_0_1_0; }

		//"types"
		public Keyword getTypesKeyword_1_0_1_1() { return cTypesKeyword_1_0_1_1; }

		//datatypeDecl=DatatypeDecl
		public Assignment getDatatypeDeclAssignment_1_0_2() { return cDatatypeDeclAssignment_1_0_2; }

		//DatatypeDecl
		public RuleCall getDatatypeDeclDatatypeDeclParserRuleCall_1_0_2_0() { return cDatatypeDeclDatatypeDeclParserRuleCall_1_0_2_0; }

		//(";" datatypeDecl2+=DatatypeDecl)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//";"
		public Keyword getSemicolonKeyword_1_0_3_0() { return cSemicolonKeyword_1_0_3_0; }

		//datatypeDecl2+=DatatypeDecl
		public Assignment getDatatypeDecl2Assignment_1_0_3_1() { return cDatatypeDecl2Assignment_1_0_3_1; }

		//DatatypeDecl
		public RuleCall getDatatypeDecl2DatatypeDeclParserRuleCall_1_0_3_1_0() { return cDatatypeDecl2DatatypeDeclParserRuleCall_1_0_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_0_4() { return cSemicolonKeyword_1_0_4; }

		//"generated" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?
		public Group getGroup_2() { return cGroup_2; }

		//"generated"
		public Keyword getGeneratedKeyword_2_0() { return cGeneratedKeyword_2_0; }

		//"type" | "types"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"type"
		public Keyword getTypeKeyword_2_1_0() { return cTypeKeyword_2_1_0; }

		//"types"
		public Keyword getTypesKeyword_2_1_1() { return cTypesKeyword_2_1_1; }

		//datatypeDecl=DatatypeDecl
		public Assignment getDatatypeDeclAssignment_2_2() { return cDatatypeDeclAssignment_2_2; }

		//DatatypeDecl
		public RuleCall getDatatypeDeclDatatypeDeclParserRuleCall_2_2_0() { return cDatatypeDeclDatatypeDeclParserRuleCall_2_2_0; }

		//(";" datatypeDecl2+=DatatypeDecl)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//";"
		public Keyword getSemicolonKeyword_2_3_0() { return cSemicolonKeyword_2_3_0; }

		//datatypeDecl2+=DatatypeDecl
		public Assignment getDatatypeDecl2Assignment_2_3_1() { return cDatatypeDecl2Assignment_2_3_1; }

		//DatatypeDecl
		public RuleCall getDatatypeDecl2DatatypeDeclParserRuleCall_2_3_1_0() { return cDatatypeDecl2DatatypeDeclParserRuleCall_2_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }

		//"generated" "{" s2+=SigItems+ "}" ";"?
		public Group getGroup_3() { return cGroup_3; }

		//"generated"
		public Keyword getGeneratedKeyword_3_0() { return cGeneratedKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//s2+=SigItems+
		public Assignment getS2Assignment_3_2() { return cS2Assignment_3_2; }

		//SigItems
		public RuleCall getS2SigItemsParserRuleCall_3_2_0() { return cS2SigItemsParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//";"?
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }

		//("var" | "vars") varDecl=VarDecl (";" varDecl2+=VarDecl)* ";"?
		public Group getGroup_4() { return cGroup_4; }

		//"var" | "vars"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"var"
		public Keyword getVarKeyword_4_0_0() { return cVarKeyword_4_0_0; }

		//"vars"
		public Keyword getVarsKeyword_4_0_1() { return cVarsKeyword_4_0_1; }

		//varDecl=VarDecl
		public Assignment getVarDeclAssignment_4_1() { return cVarDeclAssignment_4_1; }

		//VarDecl
		public RuleCall getVarDeclVarDeclParserRuleCall_4_1_0() { return cVarDeclVarDeclParserRuleCall_4_1_0; }

		//(";" varDecl2+=VarDecl)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//";"
		public Keyword getSemicolonKeyword_4_2_0() { return cSemicolonKeyword_4_2_0; }

		//varDecl2+=VarDecl
		public Assignment getVarDecl2Assignment_4_2_1() { return cVarDecl2Assignment_4_2_1; }

		//VarDecl
		public RuleCall getVarDecl2VarDeclParserRuleCall_4_2_1_0() { return cVarDecl2VarDeclParserRuleCall_4_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }

		//"forall" varDecl=VarDecl (";" varDecl2+=VarDecl)* "." formula=Formula (";" formula2+=Formula)* ";"?
		public Group getGroup_5() { return cGroup_5; }

		//"forall"
		public Keyword getForallKeyword_5_0() { return cForallKeyword_5_0; }

		//varDecl=VarDecl
		public Assignment getVarDeclAssignment_5_1() { return cVarDeclAssignment_5_1; }

		//VarDecl
		public RuleCall getVarDeclVarDeclParserRuleCall_5_1_0() { return cVarDeclVarDeclParserRuleCall_5_1_0; }

		//(";" varDecl2+=VarDecl)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//";"
		public Keyword getSemicolonKeyword_5_2_0() { return cSemicolonKeyword_5_2_0; }

		//varDecl2+=VarDecl
		public Assignment getVarDecl2Assignment_5_2_1() { return cVarDecl2Assignment_5_2_1; }

		//VarDecl
		public RuleCall getVarDecl2VarDeclParserRuleCall_5_2_1_0() { return cVarDecl2VarDeclParserRuleCall_5_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_5_3() { return cFullStopKeyword_5_3; }

		//formula=Formula
		public Assignment getFormulaAssignment_5_4() { return cFormulaAssignment_5_4; }

		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_5_4_0() { return cFormulaFormulaParserRuleCall_5_4_0; }

		//(";" formula2+=Formula)*
		public Group getGroup_5_5() { return cGroup_5_5; }

		//";"
		public Keyword getSemicolonKeyword_5_5_0() { return cSemicolonKeyword_5_5_0; }

		//formula2+=Formula
		public Assignment getFormula2Assignment_5_5_1() { return cFormula2Assignment_5_5_1; }

		//Formula
		public RuleCall getFormula2FormulaParserRuleCall_5_5_1_0() { return cFormula2FormulaParserRuleCall_5_5_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_5_6() { return cSemicolonKeyword_5_6; }
	}

	public class SigItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SigItems");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cSortKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cSortsKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cSortItemAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSortItemSortItemParserRuleCall_0_1_0 = (RuleCall)cSortItemAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cSortItem2Assignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cSortItem2SortItemParserRuleCall_0_2_1_0 = (RuleCall)cSortItem2Assignment_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cOpKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOpsKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cOpItemAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpItemOpItemParserRuleCall_1_1_0 = (RuleCall)cOpItemAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOpItem2Assignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOpItem2OpItemParserRuleCall_1_2_1_0 = (RuleCall)cOpItem2Assignment_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cPredKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cPredsKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cPredItemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredItemPredItemParserRuleCall_2_1_0 = (RuleCall)cPredItemAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPredItem2Assignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPredItem2PredItemParserRuleCall_2_2_1_0 = (RuleCall)cPredItem2Assignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cTypeKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cTypesKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cDatatypeDeclAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDatatypeDeclDatatypeDeclParserRuleCall_3_1_0 = (RuleCall)cDatatypeDeclAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDatatypeDecl2Assignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDatatypeDecl2DatatypeDeclParserRuleCall_3_2_1_0 = (RuleCall)cDatatypeDecl2Assignment_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//SigItems:
		//	("sort" | "sorts") sortItem=SortItem (";" sortItem2+=SortItem)* ";"? | ("op" | "ops") opItem=OpItem (";"
		//	opItem2+=OpItem)* ";"? | ("pred" | "preds") predItem=PredItem (";" predItem2+=PredItem)* ";"? | ("type" | "types")
		//	datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?;
		public ParserRule getRule() { return rule; }

		//("sort" | "sorts") sortItem=SortItem (";" sortItem2+=SortItem)* ";"? | ("op" | "ops") opItem=OpItem (";"
		//opItem2+=OpItem)* ";"? | ("pred" | "preds") predItem=PredItem (";" predItem2+=PredItem)* ";"? | ("type" | "types")
		//datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//("sort" | "sorts") sortItem=SortItem (";" sortItem2+=SortItem)* ";"?
		public Group getGroup_0() { return cGroup_0; }

		//"sort" | "sorts"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"sort"
		public Keyword getSortKeyword_0_0_0() { return cSortKeyword_0_0_0; }

		//"sorts"
		public Keyword getSortsKeyword_0_0_1() { return cSortsKeyword_0_0_1; }

		//sortItem=SortItem
		public Assignment getSortItemAssignment_0_1() { return cSortItemAssignment_0_1; }

		//SortItem
		public RuleCall getSortItemSortItemParserRuleCall_0_1_0() { return cSortItemSortItemParserRuleCall_0_1_0; }

		//(";" sortItem2+=SortItem)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//";"
		public Keyword getSemicolonKeyword_0_2_0() { return cSemicolonKeyword_0_2_0; }

		//sortItem2+=SortItem
		public Assignment getSortItem2Assignment_0_2_1() { return cSortItem2Assignment_0_2_1; }

		//SortItem
		public RuleCall getSortItem2SortItemParserRuleCall_0_2_1_0() { return cSortItem2SortItemParserRuleCall_0_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//("op" | "ops") opItem=OpItem (";" opItem2+=OpItem)* ";"?
		public Group getGroup_1() { return cGroup_1; }

		//"op" | "ops"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"op"
		public Keyword getOpKeyword_1_0_0() { return cOpKeyword_1_0_0; }

		//"ops"
		public Keyword getOpsKeyword_1_0_1() { return cOpsKeyword_1_0_1; }

		//opItem=OpItem
		public Assignment getOpItemAssignment_1_1() { return cOpItemAssignment_1_1; }

		//OpItem
		public RuleCall getOpItemOpItemParserRuleCall_1_1_0() { return cOpItemOpItemParserRuleCall_1_1_0; }

		//(";" opItem2+=OpItem)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//";"
		public Keyword getSemicolonKeyword_1_2_0() { return cSemicolonKeyword_1_2_0; }

		//opItem2+=OpItem
		public Assignment getOpItem2Assignment_1_2_1() { return cOpItem2Assignment_1_2_1; }

		//OpItem
		public RuleCall getOpItem2OpItemParserRuleCall_1_2_1_0() { return cOpItem2OpItemParserRuleCall_1_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }

		//("pred" | "preds") predItem=PredItem (";" predItem2+=PredItem)* ";"?
		public Group getGroup_2() { return cGroup_2; }

		//"pred" | "preds"
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"pred"
		public Keyword getPredKeyword_2_0_0() { return cPredKeyword_2_0_0; }

		//"preds"
		public Keyword getPredsKeyword_2_0_1() { return cPredsKeyword_2_0_1; }

		//predItem=PredItem
		public Assignment getPredItemAssignment_2_1() { return cPredItemAssignment_2_1; }

		//PredItem
		public RuleCall getPredItemPredItemParserRuleCall_2_1_0() { return cPredItemPredItemParserRuleCall_2_1_0; }

		//(";" predItem2+=PredItem)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//";"
		public Keyword getSemicolonKeyword_2_2_0() { return cSemicolonKeyword_2_2_0; }

		//predItem2+=PredItem
		public Assignment getPredItem2Assignment_2_2_1() { return cPredItem2Assignment_2_2_1; }

		//PredItem
		public RuleCall getPredItem2PredItemParserRuleCall_2_2_1_0() { return cPredItem2PredItemParserRuleCall_2_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }

		//("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?
		public Group getGroup_3() { return cGroup_3; }

		//"type" | "types"
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//"type"
		public Keyword getTypeKeyword_3_0_0() { return cTypeKeyword_3_0_0; }

		//"types"
		public Keyword getTypesKeyword_3_0_1() { return cTypesKeyword_3_0_1; }

		//datatypeDecl=DatatypeDecl
		public Assignment getDatatypeDeclAssignment_3_1() { return cDatatypeDeclAssignment_3_1; }

		//DatatypeDecl
		public RuleCall getDatatypeDeclDatatypeDeclParserRuleCall_3_1_0() { return cDatatypeDeclDatatypeDeclParserRuleCall_3_1_0; }

		//(";" datatypeDecl2+=DatatypeDecl)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//";"
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }

		//datatypeDecl2+=DatatypeDecl
		public Assignment getDatatypeDecl2Assignment_3_2_1() { return cDatatypeDecl2Assignment_3_2_1; }

		//DatatypeDecl
		public RuleCall getDatatypeDecl2DatatypeDeclParserRuleCall_3_2_1_0() { return cDatatypeDecl2DatatypeDeclParserRuleCall_3_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }
	}

	public class SortItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SortItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSortSortParserRuleCall_0_0 = (RuleCall)cSortAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSort2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSort2SortParserRuleCall_1_1_0 = (RuleCall)cSort2Assignment_1_1.eContents().get(0);
		
		//SortItem:
		//	sort=Sort ("," sort2+=Sort)*;
		public ParserRule getRule() { return rule; }

		//sort=Sort ("," sort2+=Sort)*
		public Group getGroup() { return cGroup; }

		//sort=Sort
		public Assignment getSortAssignment_0() { return cSortAssignment_0; }

		//Sort
		public RuleCall getSortSortParserRuleCall_0_0() { return cSortSortParserRuleCall_0_0; }

		//("," sort2+=Sort)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//sort2+=Sort
		public Assignment getSort2Assignment_1_1() { return cSort2Assignment_1_1; }

		//Sort
		public RuleCall getSort2SortParserRuleCall_1_1_0() { return cSort2SortParserRuleCall_1_1_0; }
	}

	public class OpItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOpNameOpNameParserRuleCall_0_0_0 = (RuleCall)cOpNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cOpName2Assignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOpName2OpNameParserRuleCall_0_1_1_0 = (RuleCall)cOpName2Assignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOpTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cOpTypeOpTypeParserRuleCall_0_3_0 = (RuleCall)cOpTypeAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cOpAttrAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cOpAttrOpAttrParserRuleCall_0_4_1_0 = (RuleCall)cOpAttrAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOpNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpNameOpNameParserRuleCall_1_0_0 = (RuleCall)cOpNameAssignment_1_0.eContents().get(0);
		private final Assignment cOpHeadAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpHeadOpHeadParserRuleCall_1_1_0 = (RuleCall)cOpHeadAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTermAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTermTermParserRuleCall_1_3_0 = (RuleCall)cTermAssignment_1_3.eContents().get(0);
		
		//OpItem:
		//	opName=OpName ("," opName2+=OpName)* ":" opType=OpType ("," opAttr+=OpAttr)* | opName=OpName opHead=OpHead "="
		//	term=Term;
		public ParserRule getRule() { return rule; }

		//opName=OpName ("," opName2+=OpName)* ":" opType=OpType ("," opAttr+=OpAttr)* | opName=OpName opHead=OpHead "=" term=Term
		public Alternatives getAlternatives() { return cAlternatives; }

		//opName=OpName ("," opName2+=OpName)* ":" opType=OpType ("," opAttr+=OpAttr)*
		public Group getGroup_0() { return cGroup_0; }

		//opName=OpName
		public Assignment getOpNameAssignment_0_0() { return cOpNameAssignment_0_0; }

		//OpName
		public RuleCall getOpNameOpNameParserRuleCall_0_0_0() { return cOpNameOpNameParserRuleCall_0_0_0; }

		//("," opName2+=OpName)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//opName2+=OpName
		public Assignment getOpName2Assignment_0_1_1() { return cOpName2Assignment_0_1_1; }

		//OpName
		public RuleCall getOpName2OpNameParserRuleCall_0_1_1_0() { return cOpName2OpNameParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//opType=OpType
		public Assignment getOpTypeAssignment_0_3() { return cOpTypeAssignment_0_3; }

		//OpType
		public RuleCall getOpTypeOpTypeParserRuleCall_0_3_0() { return cOpTypeOpTypeParserRuleCall_0_3_0; }

		//("," opAttr+=OpAttr)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//opAttr+=OpAttr
		public Assignment getOpAttrAssignment_0_4_1() { return cOpAttrAssignment_0_4_1; }

		//OpAttr
		public RuleCall getOpAttrOpAttrParserRuleCall_0_4_1_0() { return cOpAttrOpAttrParserRuleCall_0_4_1_0; }

		//opName=OpName opHead=OpHead "=" term=Term
		public Group getGroup_1() { return cGroup_1; }

		//opName=OpName
		public Assignment getOpNameAssignment_1_0() { return cOpNameAssignment_1_0; }

		//OpName
		public RuleCall getOpNameOpNameParserRuleCall_1_0_0() { return cOpNameOpNameParserRuleCall_1_0_0; }

		//opHead=OpHead
		public Assignment getOpHeadAssignment_1_1() { return cOpHeadAssignment_1_1; }

		//OpHead
		public RuleCall getOpHeadOpHeadParserRuleCall_1_1_0() { return cOpHeadOpHeadParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//term=Term
		public Assignment getTermAssignment_1_3() { return cTermAssignment_1_3; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_3_0() { return cTermTermParserRuleCall_1_3_0; }
	}

	public class OpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSortAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSortSortParserRuleCall_0_1_0 = (RuleCall)cSortAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSortAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSortSortParserRuleCall_1_0_0 = (RuleCall)cSortAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSort2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSort2SortParserRuleCall_1_1_1_0 = (RuleCall)cSort2Assignment_1_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSort3Assignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSort3SortParserRuleCall_1_4_0 = (RuleCall)cSort3Assignment_1_4.eContents().get(0);
		
		//OpType:
		//	"?"? sort=Sort | sort=Sort ("*" sort2+=Sort)* "?"? "->" sort3=Sort;
		public ParserRule getRule() { return rule; }

		//"?"? sort=Sort | sort=Sort ("*" sort2+=Sort)* "?"? "->" sort3=Sort
		public Alternatives getAlternatives() { return cAlternatives; }

		//"?"? sort=Sort
		public Group getGroup_0() { return cGroup_0; }

		//"?"?
		public Keyword getQuestionMarkKeyword_0_0() { return cQuestionMarkKeyword_0_0; }

		//sort=Sort
		public Assignment getSortAssignment_0_1() { return cSortAssignment_0_1; }

		//Sort
		public RuleCall getSortSortParserRuleCall_0_1_0() { return cSortSortParserRuleCall_0_1_0; }

		//sort=Sort ("*" sort2+=Sort)* "?"? "->" sort3=Sort
		public Group getGroup_1() { return cGroup_1; }

		//sort=Sort
		public Assignment getSortAssignment_1_0() { return cSortAssignment_1_0; }

		//Sort
		public RuleCall getSortSortParserRuleCall_1_0_0() { return cSortSortParserRuleCall_1_0_0; }

		//("*" sort2+=Sort)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }

		//sort2+=Sort
		public Assignment getSort2Assignment_1_1_1() { return cSort2Assignment_1_1_1; }

		//Sort
		public RuleCall getSort2SortParserRuleCall_1_1_1_0() { return cSort2SortParserRuleCall_1_1_1_0; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1_2() { return cQuestionMarkKeyword_1_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_3() { return cHyphenMinusGreaterThanSignKeyword_1_3; }

		//sort3=Sort
		public Assignment getSort3Assignment_1_4() { return cSort3Assignment_1_4; }

		//Sort
		public RuleCall getSort3SortParserRuleCall_1_4_0() { return cSort3SortParserRuleCall_1_4_0; }
	}

	public class OpAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOpAssocKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOpCommKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cOpIdemKeyword_2_0 = (Keyword)cOpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOpUnitKeyword_3_0_0 = (Keyword)cOpAssignment_3_0.eContents().get(0);
		private final Assignment cTermAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_3_1_0 = (RuleCall)cTermAssignment_3_1.eContents().get(0);
		
		//OpAttr:
		//	op="assoc" | op="comm" | op="idem" | op="unit" term=Term;
		public ParserRule getRule() { return rule; }

		//op="assoc" | op="comm" | op="idem" | op="unit" term=Term
		public Alternatives getAlternatives() { return cAlternatives; }

		//op="assoc"
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"assoc"
		public Keyword getOpAssocKeyword_0_0() { return cOpAssocKeyword_0_0; }

		//op="comm"
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//"comm"
		public Keyword getOpCommKeyword_1_0() { return cOpCommKeyword_1_0; }

		//op="idem"
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//"idem"
		public Keyword getOpIdemKeyword_2_0() { return cOpIdemKeyword_2_0; }

		//op="unit" term=Term
		public Group getGroup_3() { return cGroup_3; }

		//op="unit"
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }

		//"unit"
		public Keyword getOpUnitKeyword_3_0_0() { return cOpUnitKeyword_3_0_0; }

		//term=Term
		public Assignment getTermAssignment_3_1() { return cTermAssignment_3_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_3_1_0() { return cTermTermParserRuleCall_3_1_0; }
	}

	public class OpHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpHead");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSortAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSortSortParserRuleCall_0_2_0 = (RuleCall)cSortAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cArgDeclAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgDeclArgDeclParserRuleCall_1_0_0 = (RuleCall)cArgDeclAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgDecl2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgDecl2ArgDeclParserRuleCall_1_1_1_0 = (RuleCall)cArgDecl2Assignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSortAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSortSortParserRuleCall_1_4_0 = (RuleCall)cSortAssignment_1_4.eContents().get(0);
		
		//OpHead:
		//	":" "?"? sort=Sort | argDecl=ArgDecl (";" argDecl2+=ArgDecl)* ":" "?"? sort=Sort;
		public ParserRule getRule() { return rule; }

		//":" "?"? sort=Sort | argDecl=ArgDecl (";" argDecl2+=ArgDecl)* ":" "?"? sort=Sort
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" "?"? sort=Sort
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//"?"?
		public Keyword getQuestionMarkKeyword_0_1() { return cQuestionMarkKeyword_0_1; }

		//sort=Sort
		public Assignment getSortAssignment_0_2() { return cSortAssignment_0_2; }

		//Sort
		public RuleCall getSortSortParserRuleCall_0_2_0() { return cSortSortParserRuleCall_0_2_0; }

		//argDecl=ArgDecl (";" argDecl2+=ArgDecl)* ":" "?"? sort=Sort
		public Group getGroup_1() { return cGroup_1; }

		//argDecl=ArgDecl
		public Assignment getArgDeclAssignment_1_0() { return cArgDeclAssignment_1_0; }

		//ArgDecl
		public RuleCall getArgDeclArgDeclParserRuleCall_1_0_0() { return cArgDeclArgDeclParserRuleCall_1_0_0; }

		//(";" argDecl2+=ArgDecl)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//argDecl2+=ArgDecl
		public Assignment getArgDecl2Assignment_1_1_1() { return cArgDecl2Assignment_1_1_1; }

		//ArgDecl
		public RuleCall getArgDecl2ArgDeclParserRuleCall_1_1_1_0() { return cArgDecl2ArgDeclParserRuleCall_1_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1_3() { return cQuestionMarkKeyword_1_3; }

		//sort=Sort
		public Assignment getSortAssignment_1_4() { return cSortAssignment_1_4; }

		//Sort
		public RuleCall getSortSortParserRuleCall_1_4_0() { return cSortSortParserRuleCall_1_4_0; }
	}

	public class ArgDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVar2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVar2VarParserRuleCall_1_1_0 = (RuleCall)cVar2Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSortSortParserRuleCall_3_0 = (RuleCall)cSortAssignment_3.eContents().get(0);
		
		//ArgDecl:
		//	var=Var (";" var2+=Var)* ":" sort=Sort;
		public ParserRule getRule() { return rule; }

		//var=Var (";" var2+=Var)* ":" sort=Sort
		public Group getGroup() { return cGroup; }

		//var=Var
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_0() { return cVarVarParserRuleCall_0_0; }

		//(";" var2+=Var)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//var2+=Var
		public Assignment getVar2Assignment_1_1() { return cVar2Assignment_1_1; }

		//Var
		public RuleCall getVar2VarParserRuleCall_1_1_0() { return cVar2VarParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//sort=Sort
		public Assignment getSortAssignment_3() { return cSortAssignment_3; }

		//Sort
		public RuleCall getSortSortParserRuleCall_3_0() { return cSortSortParserRuleCall_3_0; }
	}

	public class PredItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPredNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPredNamePredNameParserRuleCall_0_0_0 = (RuleCall)cPredNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cPredName2Assignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cPredName2PredNameParserRuleCall_0_1_1_0 = (RuleCall)cPredName2Assignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cPredTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cPredTypePredTypeParserRuleCall_0_3_0 = (RuleCall)cPredTypeAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPredNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPredNamePredNameParserRuleCall_1_0_0 = (RuleCall)cPredNameAssignment_1_0.eContents().get(0);
		private final Assignment cPredHeadAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPredHeadPredHeadParserRuleCall_1_1_0 = (RuleCall)cPredHeadAssignment_1_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFormulaAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFormulaFormulaParserRuleCall_1_3_0 = (RuleCall)cFormulaAssignment_1_3.eContents().get(0);
		
		//PredItem:
		//	predName=PredName ("," predName2+=PredName)* ":" predType+=PredType | predName=PredName predHead=PredHead? "<=>"
		//	formula=Formula;
		public ParserRule getRule() { return rule; }

		//predName=PredName ("," predName2+=PredName)* ":" predType+=PredType | predName=PredName predHead=PredHead? "<=>"
		//formula=Formula
		public Alternatives getAlternatives() { return cAlternatives; }

		//predName=PredName ("," predName2+=PredName)* ":" predType+=PredType
		public Group getGroup_0() { return cGroup_0; }

		//predName=PredName
		public Assignment getPredNameAssignment_0_0() { return cPredNameAssignment_0_0; }

		//PredName
		public RuleCall getPredNamePredNameParserRuleCall_0_0_0() { return cPredNamePredNameParserRuleCall_0_0_0; }

		//("," predName2+=PredName)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//predName2+=PredName
		public Assignment getPredName2Assignment_0_1_1() { return cPredName2Assignment_0_1_1; }

		//PredName
		public RuleCall getPredName2PredNameParserRuleCall_0_1_1_0() { return cPredName2PredNameParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//predType+=PredType
		public Assignment getPredTypeAssignment_0_3() { return cPredTypeAssignment_0_3; }

		//PredType
		public RuleCall getPredTypePredTypeParserRuleCall_0_3_0() { return cPredTypePredTypeParserRuleCall_0_3_0; }

		//predName=PredName predHead=PredHead? "<=>" formula=Formula
		public Group getGroup_1() { return cGroup_1; }

		//predName=PredName
		public Assignment getPredNameAssignment_1_0() { return cPredNameAssignment_1_0; }

		//PredName
		public RuleCall getPredNamePredNameParserRuleCall_1_0_0() { return cPredNamePredNameParserRuleCall_1_0_0; }

		//predHead=PredHead?
		public Assignment getPredHeadAssignment_1_1() { return cPredHeadAssignment_1_1; }

		//PredHead
		public RuleCall getPredHeadPredHeadParserRuleCall_1_1_0() { return cPredHeadPredHeadParserRuleCall_1_1_0; }

		//"<=>"
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1_2() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1_2; }

		//formula=Formula
		public Assignment getFormulaAssignment_1_3() { return cFormulaAssignment_1_3; }

		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_1_3_0() { return cFormulaFormulaParserRuleCall_1_3_0; }
	}

	public class PredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSortAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSortSortParserRuleCall_0_0_0 = (RuleCall)cSortAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSort2Assignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSort2SortParserRuleCall_0_1_1_0 = (RuleCall)cSort2Assignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cBLeftParenthesisKeyword_1_0_0 = (Keyword)cBAssignment_1_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//PredType:
		//	sort=Sort ("*" sort2+=Sort)* | b="(" ")";
		public ParserRule getRule() { return rule; }

		//sort=Sort ("*" sort2+=Sort)* | b="(" ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//sort=Sort ("*" sort2+=Sort)*
		public Group getGroup_0() { return cGroup_0; }

		//sort=Sort
		public Assignment getSortAssignment_0_0() { return cSortAssignment_0_0; }

		//Sort
		public RuleCall getSortSortParserRuleCall_0_0_0() { return cSortSortParserRuleCall_0_0_0; }

		//("*" sort2+=Sort)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_0_1_0() { return cAsteriskKeyword_0_1_0; }

		//sort2+=Sort
		public Assignment getSort2Assignment_0_1_1() { return cSort2Assignment_0_1_1; }

		//Sort
		public RuleCall getSort2SortParserRuleCall_0_1_1_0() { return cSort2SortParserRuleCall_0_1_1_0; }

		//b="(" ")"
		public Group getGroup_1() { return cGroup_1; }

		//b="("
		public Assignment getBAssignment_1_0() { return cBAssignment_1_0; }

		//"("
		public Keyword getBLeftParenthesisKeyword_1_0_0() { return cBLeftParenthesisKeyword_1_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
	}

	public class PredHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredHead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgDeclArgDeclParserRuleCall_0_0 = (RuleCall)cArgDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgDecl2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgDecl2ArgDeclParserRuleCall_1_1_0 = (RuleCall)cArgDecl2Assignment_1_1.eContents().get(0);
		
		//PredHead:
		//	argDecl=ArgDecl (";" argDecl2+=ArgDecl)*;
		public ParserRule getRule() { return rule; }

		//argDecl=ArgDecl (";" argDecl2+=ArgDecl)*
		public Group getGroup() { return cGroup; }

		//argDecl=ArgDecl
		public Assignment getArgDeclAssignment_0() { return cArgDeclAssignment_0; }

		//ArgDecl
		public RuleCall getArgDeclArgDeclParserRuleCall_0_0() { return cArgDeclArgDeclParserRuleCall_0_0; }

		//(";" argDecl2+=ArgDecl)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//argDecl2+=ArgDecl
		public Assignment getArgDecl2Assignment_1_1() { return cArgDecl2Assignment_1_1; }

		//ArgDecl
		public RuleCall getArgDecl2ArgDeclParserRuleCall_1_1_0() { return cArgDecl2ArgDeclParserRuleCall_1_1_0; }
	}

	public class DatatypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatatypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSortParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlternativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlternativeAlternativeParserRuleCall_2_0 = (RuleCall)cAlternativeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAlternative2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAlternative2AlternativeParserRuleCall_3_1_0 = (RuleCall)cAlternative2Assignment_3_1.eContents().get(0);
		
		//DatatypeDecl:
		//	Sort "::=" alternative=Alternative (";" alternative2+=Alternative)*;
		public ParserRule getRule() { return rule; }

		//Sort "::=" alternative=Alternative (";" alternative2+=Alternative)*
		public Group getGroup() { return cGroup; }

		//Sort
		public RuleCall getSortParserRuleCall_0() { return cSortParserRuleCall_0; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_1() { return cColonColonEqualsSignKeyword_1; }

		//alternative=Alternative
		public Assignment getAlternativeAssignment_2() { return cAlternativeAssignment_2; }

		//Alternative
		public RuleCall getAlternativeAlternativeParserRuleCall_2_0() { return cAlternativeAlternativeParserRuleCall_2_0; }

		//(";" alternative2+=Alternative)*
		public Group getGroup_3() { return cGroup_3; }

		//";"
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }

		//alternative2+=Alternative
		public Assignment getAlternative2Assignment_3_1() { return cAlternative2Assignment_3_1; }

		//Alternative
		public RuleCall getAlternative2AlternativeParserRuleCall_3_1_0() { return cAlternative2AlternativeParserRuleCall_3_1_0; }
	}

	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpNameOpNameParserRuleCall_0_0 = (RuleCall)cOpNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cComponentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cComponentComponentParserRuleCall_1_0_0 = (RuleCall)cComponentAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cComponent2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cComponent2ComponentParserRuleCall_1_1_1_0 = (RuleCall)cComponent2Assignment_1_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Alternative:
		//	opName=OpName (component=Component (";" component2+=Component)* "?"?)?;
		public ParserRule getRule() { return rule; }

		//opName=OpName (component=Component (";" component2+=Component)* "?"?)?
		public Group getGroup() { return cGroup; }

		//opName=OpName
		public Assignment getOpNameAssignment_0() { return cOpNameAssignment_0; }

		//OpName
		public RuleCall getOpNameOpNameParserRuleCall_0_0() { return cOpNameOpNameParserRuleCall_0_0; }

		//(component=Component (";" component2+=Component)* "?"?)?
		public Group getGroup_1() { return cGroup_1; }

		//component=Component
		public Assignment getComponentAssignment_1_0() { return cComponentAssignment_1_0; }

		//Component
		public RuleCall getComponentComponentParserRuleCall_1_0_0() { return cComponentComponentParserRuleCall_1_0_0; }

		//(";" component2+=Component)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//component2+=Component
		public Assignment getComponent2Assignment_1_1_1() { return cComponent2Assignment_1_1_1; }

		//Component
		public RuleCall getComponent2ComponentParserRuleCall_1_1_1_0() { return cComponent2ComponentParserRuleCall_1_1_1_0; }

		//"?"?
		public Keyword getQuestionMarkKeyword_1_2() { return cQuestionMarkKeyword_1_2; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cOpNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOpNameOpNameParserRuleCall_0_0_0 = (RuleCall)cOpNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cOpName2Assignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOpName2OpNameParserRuleCall_0_1_1_0 = (RuleCall)cOpName2Assignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSortSortParserRuleCall_1_0 = (RuleCall)cSortAssignment_1.eContents().get(0);
		
		//Component:
		//	(opName=OpName ("," opName2+=OpName)* ":" "?"?) sort=Sort;
		public ParserRule getRule() { return rule; }

		//(opName=OpName ("," opName2+=OpName)* ":" "?"?) sort=Sort
		public Group getGroup() { return cGroup; }

		//opName=OpName ("," opName2+=OpName)* ":" "?"?
		public Group getGroup_0() { return cGroup_0; }

		//opName=OpName
		public Assignment getOpNameAssignment_0_0() { return cOpNameAssignment_0_0; }

		//OpName
		public RuleCall getOpNameOpNameParserRuleCall_0_0_0() { return cOpNameOpNameParserRuleCall_0_0_0; }

		//("," opName2+=OpName)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//opName2+=OpName
		public Assignment getOpName2Assignment_0_1_1() { return cOpName2Assignment_0_1_1; }

		//OpName
		public RuleCall getOpName2OpNameParserRuleCall_0_1_1_0() { return cOpName2OpNameParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//"?"?
		public Keyword getQuestionMarkKeyword_0_3() { return cQuestionMarkKeyword_0_3; }

		//sort=Sort
		public Assignment getSortAssignment_1() { return cSortAssignment_1; }

		//Sort
		public RuleCall getSortSortParserRuleCall_1_0() { return cSortSortParserRuleCall_1_0; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVar2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVar2VarParserRuleCall_1_1_0 = (RuleCall)cVar2Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSortSortParserRuleCall_3_0 = (RuleCall)cSortAssignment_3.eContents().get(0);
		
		//VarDecl:
		//	var=Var ("," var2+=Var)* ":" sort=Sort;
		public ParserRule getRule() { return rule; }

		//var=Var ("," var2+=Var)* ":" sort=Sort
		public Group getGroup() { return cGroup; }

		//var=Var
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_0_0() { return cVarVarParserRuleCall_0_0; }

		//("," var2+=Var)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//var2+=Var
		public Assignment getVar2Assignment_1_1() { return cVar2Assignment_1_1; }

		//Var
		public RuleCall getVar2VarParserRuleCall_1_1_0() { return cVar2VarParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//sort=Sort
		public Assignment getSortAssignment_3() { return cSortAssignment_3; }

		//Sort
		public RuleCall getSortSortParserRuleCall_3_0() { return cSortSortParserRuleCall_3_0; }
	}

	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Formula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cQuantifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cQuantifierQuantifierParserRuleCall_0_0_0 = (RuleCall)cQuantifierAssignment_0_0.eContents().get(0);
		private final Assignment cVarDeclAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarDeclVarDeclParserRuleCall_0_1_0 = (RuleCall)cVarDeclAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cVarDecl2Assignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cVarDecl2VarDeclParserRuleCall_0_2_1_0 = (RuleCall)cVarDecl2Assignment_0_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cFormulaAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cFormulaFormulaParserRuleCall_0_4_0 = (RuleCall)cFormulaAssignment_0_4.eContents().get(0);
		private final Assignment cFormulaAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFormulaFormulaAndParserRuleCall_1_0 = (RuleCall)cFormulaAssignment_1.eContents().get(0);
		
		/// *
		//The following LALR(1) rule is converted to xtext format
		//FORMULA ::= QUANTIFIER VAR-DECL ;...; VAR-DECL '.' FORMULA
		//            | FORMULA /\ FORMULA /\.../\ FORMULA
		//            | FORMULA \/ FORMULA \/...\/ FORMULA
		//            | FORMULA => FORMULA
		//            | FORMULA if FORMULA
		//            | FORMULA <=> FORMULA
		//            | not FORMULA
		//            | true | false
		//            | def TERM
		//            | TERM =e= TERM
		//            | TERM = TERM
		//            | (FORMULA)
		//            | MISFIX...MISFIX
		// * / Formula returns Formu:
		//	quantifier=Quantifier varDecl=VarDecl (";" varDecl2+=VarDecl)* "." formula=Formula | formula=FormulaAnd;
		public ParserRule getRule() { return rule; }

		//quantifier=Quantifier varDecl=VarDecl (";" varDecl2+=VarDecl)* "." formula=Formula | formula=FormulaAnd
		public Alternatives getAlternatives() { return cAlternatives; }

		//quantifier=Quantifier varDecl=VarDecl (";" varDecl2+=VarDecl)* "." formula=Formula
		public Group getGroup_0() { return cGroup_0; }

		//quantifier=Quantifier
		public Assignment getQuantifierAssignment_0_0() { return cQuantifierAssignment_0_0; }

		//Quantifier
		public RuleCall getQuantifierQuantifierParserRuleCall_0_0_0() { return cQuantifierQuantifierParserRuleCall_0_0_0; }

		//varDecl=VarDecl
		public Assignment getVarDeclAssignment_0_1() { return cVarDeclAssignment_0_1; }

		//VarDecl
		public RuleCall getVarDeclVarDeclParserRuleCall_0_1_0() { return cVarDeclVarDeclParserRuleCall_0_1_0; }

		//(";" varDecl2+=VarDecl)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//";"
		public Keyword getSemicolonKeyword_0_2_0() { return cSemicolonKeyword_0_2_0; }

		//varDecl2+=VarDecl
		public Assignment getVarDecl2Assignment_0_2_1() { return cVarDecl2Assignment_0_2_1; }

		//VarDecl
		public RuleCall getVarDecl2VarDeclParserRuleCall_0_2_1_0() { return cVarDecl2VarDeclParserRuleCall_0_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_0_3() { return cFullStopKeyword_0_3; }

		//formula=Formula
		public Assignment getFormulaAssignment_0_4() { return cFormulaAssignment_0_4; }

		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_0_4_0() { return cFormulaFormulaParserRuleCall_0_4_0; }

		//formula=FormulaAnd
		public Assignment getFormulaAssignment_1() { return cFormulaAssignment_1; }

		//FormulaAnd
		public RuleCall getFormulaFormulaAndParserRuleCall_1_0() { return cFormulaFormulaAndParserRuleCall_1_0; }
	}

	public class FormulaAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFormulaOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFormulaAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpSolidusReverseSolidusKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFormulaOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//FormulaAnd returns Formu:
		//	FormulaOr ({FormulaAnd.left=current} op="/\\" right=FormulaOr)*;
		public ParserRule getRule() { return rule; }

		//FormulaOr ({FormulaAnd.left=current} op="/\\" right=FormulaOr)*
		public Group getGroup() { return cGroup; }

		//FormulaOr
		public RuleCall getFormulaOrParserRuleCall_0() { return cFormulaOrParserRuleCall_0; }

		//({FormulaAnd.left=current} op="/\\" right=FormulaOr)*
		public Group getGroup_1() { return cGroup_1; }

		//{FormulaAnd.left=current}
		public Action getFormulaAndLeftAction_1_0() { return cFormulaAndLeftAction_1_0; }

		//op="/\\"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"/\\"
		public Keyword getOpSolidusReverseSolidusKeyword_1_1_0() { return cOpSolidusReverseSolidusKeyword_1_1_0; }

		//right=FormulaOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//FormulaOr
		public RuleCall getRightFormulaOrParserRuleCall_1_2_0() { return cRightFormulaOrParserRuleCall_1_2_0; }
	}

	public class FormulaOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFormulaImpliesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFormulaOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpReverseSolidusSolidusKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFormulaImpliesParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//FormulaOr returns Formu:
		//	FormulaImplies ({FormulaOr.left=current} op="\\/" right=FormulaImplies)*;
		public ParserRule getRule() { return rule; }

		//FormulaImplies ({FormulaOr.left=current} op="\\/" right=FormulaImplies)*
		public Group getGroup() { return cGroup; }

		//FormulaImplies
		public RuleCall getFormulaImpliesParserRuleCall_0() { return cFormulaImpliesParserRuleCall_0; }

		//({FormulaOr.left=current} op="\\/" right=FormulaImplies)*
		public Group getGroup_1() { return cGroup_1; }

		//{FormulaOr.left=current}
		public Action getFormulaOrLeftAction_1_0() { return cFormulaOrLeftAction_1_0; }

		//op="\\/"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"\\/"
		public Keyword getOpReverseSolidusSolidusKeyword_1_1_0() { return cOpReverseSolidusSolidusKeyword_1_1_0; }

		//right=FormulaImplies
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//FormulaImplies
		public RuleCall getRightFormulaImpliesParserRuleCall_1_2_0() { return cRightFormulaImpliesParserRuleCall_1_2_0; }
	}

	public class FormulaImpliesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaImplies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFormulaIfParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFormulaImpliesLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFormulaIfParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//FormulaImplies returns Formu:
		//	FormulaIf ({FormulaImplies.left=current} op="=>" right=FormulaIf)?;
		public ParserRule getRule() { return rule; }

		//FormulaIf ({FormulaImplies.left=current} op="=>" right=FormulaIf)?
		public Group getGroup() { return cGroup; }

		//FormulaIf
		public RuleCall getFormulaIfParserRuleCall_0() { return cFormulaIfParserRuleCall_0; }

		//({FormulaImplies.left=current} op="=>" right=FormulaIf)?
		public Group getGroup_1() { return cGroup_1; }

		//{FormulaImplies.left=current}
		public Action getFormulaImpliesLeftAction_1_0() { return cFormulaImpliesLeftAction_1_0; }

		//op="=>"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"=>"
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_1_0; }

		//right=FormulaIf
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//FormulaIf
		public RuleCall getRightFormulaIfParserRuleCall_1_2_0() { return cRightFormulaIfParserRuleCall_1_2_0; }
	}

	public class FormulaIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFormulaEquivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFormulaIfLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpIfKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFormulaEquivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//FormulaIf returns Formu:
		//	FormulaEquiv ({FormulaIf.left=current} op="if" right=FormulaEquiv)?;
		public ParserRule getRule() { return rule; }

		//FormulaEquiv ({FormulaIf.left=current} op="if" right=FormulaEquiv)?
		public Group getGroup() { return cGroup; }

		//FormulaEquiv
		public RuleCall getFormulaEquivParserRuleCall_0() { return cFormulaEquivParserRuleCall_0; }

		//({FormulaIf.left=current} op="if" right=FormulaEquiv)?
		public Group getGroup_1() { return cGroup_1; }

		//{FormulaIf.left=current}
		public Action getFormulaIfLeftAction_1_0() { return cFormulaIfLeftAction_1_0; }

		//op="if"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"if"
		public Keyword getOpIfKeyword_1_1_0() { return cOpIfKeyword_1_1_0; }

		//right=FormulaEquiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//FormulaEquiv
		public RuleCall getRightFormulaEquivParserRuleCall_1_2_0() { return cRightFormulaEquivParserRuleCall_1_2_0; }
	}

	public class FormulaEquivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaEquiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFormulaUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFormulaEquivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFormulaUnaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//FormulaEquiv returns Formu:
		//	FormulaUnary ({FormulaEquiv.left=current} op="<=>" right=FormulaUnary)?;
		public ParserRule getRule() { return rule; }

		//FormulaUnary ({FormulaEquiv.left=current} op="<=>" right=FormulaUnary)?
		public Group getGroup() { return cGroup; }

		//FormulaUnary
		public RuleCall getFormulaUnaryParserRuleCall_0() { return cFormulaUnaryParserRuleCall_0; }

		//({FormulaEquiv.left=current} op="<=>" right=FormulaUnary)?
		public Group getGroup_1() { return cGroup_1; }

		//{FormulaEquiv.left=current}
		public Action getFormulaEquivLeftAction_1_0() { return cFormulaEquivLeftAction_1_0; }

		//op="<=>"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"<=>"
		public Keyword getOpLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0() { return cOpLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0; }

		//right=FormulaUnary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//FormulaUnary
		public RuleCall getRightFormulaUnaryParserRuleCall_1_2_0() { return cRightFormulaUnaryParserRuleCall_1_2_0; }
	}

	public class FormulaUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cUopAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cUopNotKeyword_0_1_0 = (Keyword)cUopAssignment_0_1.eContents().get(0);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprFormulaParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Assignment cE3Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cE3TrueKeyword_1_0 = (Keyword)cE3Assignment_1.eContents().get(0);
		private final Assignment cE3Assignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cE3FalseKeyword_2_0 = (Keyword)cE3Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cE3Assignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cE3DefKeyword_3_0_0 = (Keyword)cE3Assignment_3_0.eContents().get(0);
		private final Assignment cTAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTTermParserRuleCall_3_1_0 = (RuleCall)cTAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cTAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTTermParserRuleCall_4_0_0 = (RuleCall)cTAssignment_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cT2Assignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cT2TermParserRuleCall_4_2_0 = (RuleCall)cT2Assignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cTAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTTermParserRuleCall_5_0_0 = (RuleCall)cTAssignment_5_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cT2Assignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cT2TermParserRuleCall_5_2_0 = (RuleCall)cT2Assignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cE3Assignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cE3LeftParenthesisKeyword_6_0_0 = (Keyword)cE3Assignment_6_0.eContents().get(0);
		private final Assignment cFormAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFormFormulaParserRuleCall_6_1_0 = (RuleCall)cFormAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cMisfixAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cMisfixMisfixParserRuleCall_7_0_0 = (RuleCall)cMisfixAssignment_7_0.eContents().get(0);
		private final Assignment cMisfix2Assignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMisfix2MisfixParserRuleCall_7_1_0 = (RuleCall)cMisfix2Assignment_7_1.eContents().get(0);
		
		//FormulaUnary returns Formu:
		//	{UnaryExpression} uop="not" expr=Formula | e3="true" | e3="false" | e3="def" t=Term | t=Term "=e=" t2=Term | t=Term
		//	"=" t2=Term | e3="(" form=Formula ")" | misfix=Misfix misfix2+=Misfix*;
		public ParserRule getRule() { return rule; }

		//{UnaryExpression} uop="not" expr=Formula | e3="true" | e3="false" | e3="def" t=Term | t=Term "=e=" t2=Term | t=Term "="
		//t2=Term | e3="(" form=Formula ")" | misfix=Misfix misfix2+=Misfix*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpression} uop="not" expr=Formula
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_0_0() { return cUnaryExpressionAction_0_0; }

		//uop="not"
		public Assignment getUopAssignment_0_1() { return cUopAssignment_0_1; }

		//"not"
		public Keyword getUopNotKeyword_0_1_0() { return cUopNotKeyword_0_1_0; }

		//expr=Formula
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//Formula
		public RuleCall getExprFormulaParserRuleCall_0_2_0() { return cExprFormulaParserRuleCall_0_2_0; }

		//e3="true"
		public Assignment getE3Assignment_1() { return cE3Assignment_1; }

		//"true"
		public Keyword getE3TrueKeyword_1_0() { return cE3TrueKeyword_1_0; }

		//e3="false"
		public Assignment getE3Assignment_2() { return cE3Assignment_2; }

		//"false"
		public Keyword getE3FalseKeyword_2_0() { return cE3FalseKeyword_2_0; }

		//e3="def" t=Term
		public Group getGroup_3() { return cGroup_3; }

		//e3="def"
		public Assignment getE3Assignment_3_0() { return cE3Assignment_3_0; }

		//"def"
		public Keyword getE3DefKeyword_3_0_0() { return cE3DefKeyword_3_0_0; }

		//t=Term
		public Assignment getTAssignment_3_1() { return cTAssignment_3_1; }

		//Term
		public RuleCall getTTermParserRuleCall_3_1_0() { return cTTermParserRuleCall_3_1_0; }

		//t=Term "=e=" t2=Term
		public Group getGroup_4() { return cGroup_4; }

		//t=Term
		public Assignment getTAssignment_4_0() { return cTAssignment_4_0; }

		//Term
		public RuleCall getTTermParserRuleCall_4_0_0() { return cTTermParserRuleCall_4_0_0; }

		//"=e="
		public Keyword getEKeyword_4_1() { return cEKeyword_4_1; }

		//t2=Term
		public Assignment getT2Assignment_4_2() { return cT2Assignment_4_2; }

		//Term
		public RuleCall getT2TermParserRuleCall_4_2_0() { return cT2TermParserRuleCall_4_2_0; }

		//t=Term "=" t2=Term
		public Group getGroup_5() { return cGroup_5; }

		//t=Term
		public Assignment getTAssignment_5_0() { return cTAssignment_5_0; }

		//Term
		public RuleCall getTTermParserRuleCall_5_0_0() { return cTTermParserRuleCall_5_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }

		//t2=Term
		public Assignment getT2Assignment_5_2() { return cT2Assignment_5_2; }

		//Term
		public RuleCall getT2TermParserRuleCall_5_2_0() { return cT2TermParserRuleCall_5_2_0; }

		//e3="(" form=Formula ")"
		public Group getGroup_6() { return cGroup_6; }

		//e3="("
		public Assignment getE3Assignment_6_0() { return cE3Assignment_6_0; }

		//"("
		public Keyword getE3LeftParenthesisKeyword_6_0_0() { return cE3LeftParenthesisKeyword_6_0_0; }

		//form=Formula
		public Assignment getFormAssignment_6_1() { return cFormAssignment_6_1; }

		//Formula
		public RuleCall getFormFormulaParserRuleCall_6_1_0() { return cFormFormulaParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }

		//misfix=Misfix misfix2+=Misfix*
		public Group getGroup_7() { return cGroup_7; }

		//misfix=Misfix
		public Assignment getMisfixAssignment_7_0() { return cMisfixAssignment_7_0; }

		//Misfix
		public RuleCall getMisfixMisfixParserRuleCall_7_0_0() { return cMisfixMisfixParserRuleCall_7_0_0; }

		//misfix2+=Misfix*
		public Assignment getMisfix2Assignment_7_1() { return cMisfix2Assignment_7_1; }

		//Misfix
		public RuleCall getMisfix2MisfixParserRuleCall_7_1_0() { return cMisfix2MisfixParserRuleCall_7_1_0; }
	}

	public class QuantifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Quantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cQAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cQForallKeyword_0_0 = (Keyword)cQAssignment_0.eContents().get(0);
		private final Assignment cQAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cQExistsKeyword_1_0 = (Keyword)cQAssignment_1.eContents().get(0);
		private final Assignment cQAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cQExistsKeyword_2_0 = (Keyword)cQAssignment_2.eContents().get(0);
		
		//Quantifier:
		//	q="forall" | q="exists" | q="exists!";
		public ParserRule getRule() { return rule; }

		//q="forall" | q="exists" | q="exists!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//q="forall"
		public Assignment getQAssignment_0() { return cQAssignment_0; }

		//"forall"
		public Keyword getQForallKeyword_0_0() { return cQForallKeyword_0_0; }

		//q="exists"
		public Assignment getQAssignment_1() { return cQAssignment_1; }

		//"exists"
		public Keyword getQExistsKeyword_1_0() { return cQExistsKeyword_1_0; }

		//q="exists!"
		public Assignment getQAssignment_2() { return cQAssignment_2; }

		//"exists!"
		public Keyword getQExistsKeyword_2_0() { return cQExistsKeyword_2_0; }
	}

	public class TermsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Terms");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermTermParserRuleCall_0_0 = (RuleCall)cTermAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTerm2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTerm2TermParserRuleCall_1_1_0 = (RuleCall)cTerm2Assignment_1_1.eContents().get(0);
		
		//Terms:
		//	term=Term ("," term2+=Term)*;
		public ParserRule getRule() { return rule; }

		//term=Term ("," term2+=Term)*
		public Group getGroup() { return cGroup; }

		//term=Term
		public Assignment getTermAssignment_0() { return cTermAssignment_0; }

		//Term
		public RuleCall getTermTermParserRuleCall_0_0() { return cTermTermParserRuleCall_0_0; }

		//("," term2+=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//term2+=Term
		public Assignment getTerm2Assignment_1_1() { return cTerm2Assignment_1_1; }

		//Term
		public RuleCall getTerm2TermParserRuleCall_1_1_0() { return cTerm2TermParserRuleCall_1_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMisfixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMisfixMisfixParserRuleCall_0_0 = (RuleCall)cMisfixAssignment_0.eContents().get(0);
		private final Assignment cMisfix2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMisfix2MisfixParserRuleCall_1_0 = (RuleCall)cMisfix2Assignment_1.eContents().get(0);
		
		//Term:
		//	misfix=Misfix misfix2+=Misfix*;
		public ParserRule getRule() { return rule; }

		//misfix=Misfix misfix2+=Misfix*
		public Group getGroup() { return cGroup; }

		//misfix=Misfix
		public Assignment getMisfixAssignment_0() { return cMisfixAssignment_0; }

		//Misfix
		public RuleCall getMisfixMisfixParserRuleCall_0_0() { return cMisfixMisfixParserRuleCall_0_0; }

		//misfix2+=Misfix*
		public Assignment getMisfix2Assignment_1() { return cMisfix2Assignment_1; }

		//Misfix
		public RuleCall getMisfix2MisfixParserRuleCall_1_0() { return cMisfix2MisfixParserRuleCall_1_0; }
	}

	public class MisfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Misfix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMisfixWhenParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMisfixLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpColonKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cSortAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSortSortParserRuleCall_1_2_0 = (RuleCall)cSortAssignment_1_2.eContents().get(0);
		
		/// *
		//The following LALR(1) rule is converted to xtext format
		//MISFIX ::= TOKEN | LITERAL | PLACE
		//         | QUAL-PRED-NAME | QUAL-VAR-NAME | QUAL-OP-NAME
		//         | TERM : SORT
		//         | TERM when FORMULA else TERM
		//         | (TERMS)
		//         | [TERMS] | []
		//         | {TERMS} | {}
		// * / Misfix returns Mfix:
		//	MisfixWhen ({Misfix.left=current} op=":" sort=Sort)?;
		public ParserRule getRule() { return rule; }

		//MisfixWhen ({Misfix.left=current} op=":" sort=Sort)?
		public Group getGroup() { return cGroup; }

		//MisfixWhen
		public RuleCall getMisfixWhenParserRuleCall_0() { return cMisfixWhenParserRuleCall_0; }

		//({Misfix.left=current} op=":" sort=Sort)?
		public Group getGroup_1() { return cGroup_1; }

		//{Misfix.left=current}
		public Action getMisfixLeftAction_1_0() { return cMisfixLeftAction_1_0; }

		//op=":"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//":"
		public Keyword getOpColonKeyword_1_1_0() { return cOpColonKeyword_1_1_0; }

		//sort=Sort
		public Assignment getSortAssignment_1_2() { return cSortAssignment_1_2; }

		//Sort
		public RuleCall getSortSortParserRuleCall_1_2_0() { return cSortSortParserRuleCall_1_2_0; }
	}

	public class MisfixWhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MisfixWhen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMisfixUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMisfixWhenLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpWhenKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cFormulaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFormulaFormulaParserRuleCall_1_2_0 = (RuleCall)cFormulaAssignment_1_2.eContents().get(0);
		private final Assignment cOp0Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cOp0WhenKeyword_1_3_0 = (Keyword)cOp0Assignment_1_3.eContents().get(0);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightMisfixUnaryParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//MisfixWhen returns Mfix:
		//	MisfixUnary ({MisfixWhen.left=current} op="when" formula=Formula op0="when" right=MisfixUnary)?;
		public ParserRule getRule() { return rule; }

		//MisfixUnary ({MisfixWhen.left=current} op="when" formula=Formula op0="when" right=MisfixUnary)?
		public Group getGroup() { return cGroup; }

		//MisfixUnary
		public RuleCall getMisfixUnaryParserRuleCall_0() { return cMisfixUnaryParserRuleCall_0; }

		//({MisfixWhen.left=current} op="when" formula=Formula op0="when" right=MisfixUnary)?
		public Group getGroup_1() { return cGroup_1; }

		//{MisfixWhen.left=current}
		public Action getMisfixWhenLeftAction_1_0() { return cMisfixWhenLeftAction_1_0; }

		//op="when"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"when"
		public Keyword getOpWhenKeyword_1_1_0() { return cOpWhenKeyword_1_1_0; }

		//formula=Formula
		public Assignment getFormulaAssignment_1_2() { return cFormulaAssignment_1_2; }

		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_1_2_0() { return cFormulaFormulaParserRuleCall_1_2_0; }

		//op0="when"
		public Assignment getOp0Assignment_1_3() { return cOp0Assignment_1_3; }

		//"when"
		public Keyword getOp0WhenKeyword_1_3_0() { return cOp0WhenKeyword_1_3_0; }

		//right=MisfixUnary
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//MisfixUnary
		public RuleCall getRightMisfixUnaryParserRuleCall_1_4_0() { return cRightMisfixUnaryParserRuleCall_1_4_0; }
	}

	public class MisfixUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MisfixUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cMisfixAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMisfixMisfixParserRuleCall_0_1_0 = (RuleCall)cMisfixAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMisfixAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMisfixMisfixParserRuleCall_1_1_0 = (RuleCall)cMisfixAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMisfixAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMisfixMisfixParserRuleCall_2_1_0 = (RuleCall)cMisfixAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cOp1Assignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cOp1TokenParserRuleCall_3_0 = (RuleCall)cOp1Assignment_3.eContents().get(0);
		private final Assignment cOp2Assignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cOp2LiteralParserRuleCall_4_0 = (RuleCall)cOp2Assignment_4.eContents().get(0);
		private final Assignment cOp3Assignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cOp3PlaceParserRuleCall_5_0 = (RuleCall)cOp3Assignment_5.eContents().get(0);
		private final Assignment cOp4Assignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cOp4QualPredNameParserRuleCall_6_0 = (RuleCall)cOp4Assignment_6.eContents().get(0);
		private final Assignment cOp5Assignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cOp5QualVarNameParserRuleCall_7_0 = (RuleCall)cOp5Assignment_7.eContents().get(0);
		private final Assignment cOp6Assignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cOp6QualOpNameParserRuleCall_8_0 = (RuleCall)cOp6Assignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cOpAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cOpLeftSquareBracketKeyword_9_0_0 = (Keyword)cOpAssignment_9_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cOpAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cOpLeftCurlyBracketKeyword_10_0_0 = (Keyword)cOpAssignment_10_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		
		//MisfixUnary returns Mfix:
		//	"(" misfix=Misfix ")" | "[" misfix=Misfix "]" | "{" misfix=Misfix "}" | op1=Token | op2=Literal | op3=Place |
		//	op4=QualPredName | op5=QualVarName | op6=QualOpName | op="[" "]" | op="{" "}";
		public ParserRule getRule() { return rule; }

		//"(" misfix=Misfix ")" | "[" misfix=Misfix "]" | "{" misfix=Misfix "}" | op1=Token | op2=Literal | op3=Place |
		//op4=QualPredName | op5=QualVarName | op6=QualOpName | op="[" "]" | op="{" "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" misfix=Misfix ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//misfix=Misfix
		public Assignment getMisfixAssignment_0_1() { return cMisfixAssignment_0_1; }

		//Misfix
		public RuleCall getMisfixMisfixParserRuleCall_0_1_0() { return cMisfixMisfixParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//"[" misfix=Misfix "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//misfix=Misfix
		public Assignment getMisfixAssignment_1_1() { return cMisfixAssignment_1_1; }

		//Misfix
		public RuleCall getMisfixMisfixParserRuleCall_1_1_0() { return cMisfixMisfixParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"{" misfix=Misfix "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//misfix=Misfix
		public Assignment getMisfixAssignment_2_1() { return cMisfixAssignment_2_1; }

		//Misfix
		public RuleCall getMisfixMisfixParserRuleCall_2_1_0() { return cMisfixMisfixParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//op1=Token
		public Assignment getOp1Assignment_3() { return cOp1Assignment_3; }

		//Token
		public RuleCall getOp1TokenParserRuleCall_3_0() { return cOp1TokenParserRuleCall_3_0; }

		//op2=Literal
		public Assignment getOp2Assignment_4() { return cOp2Assignment_4; }

		//Literal
		public RuleCall getOp2LiteralParserRuleCall_4_0() { return cOp2LiteralParserRuleCall_4_0; }

		//op3=Place
		public Assignment getOp3Assignment_5() { return cOp3Assignment_5; }

		//Place
		public RuleCall getOp3PlaceParserRuleCall_5_0() { return cOp3PlaceParserRuleCall_5_0; }

		//op4=QualPredName
		public Assignment getOp4Assignment_6() { return cOp4Assignment_6; }

		//QualPredName
		public RuleCall getOp4QualPredNameParserRuleCall_6_0() { return cOp4QualPredNameParserRuleCall_6_0; }

		//op5=QualVarName
		public Assignment getOp5Assignment_7() { return cOp5Assignment_7; }

		//QualVarName
		public RuleCall getOp5QualVarNameParserRuleCall_7_0() { return cOp5QualVarNameParserRuleCall_7_0; }

		//op6=QualOpName
		public Assignment getOp6Assignment_8() { return cOp6Assignment_8; }

		//QualOpName
		public RuleCall getOp6QualOpNameParserRuleCall_8_0() { return cOp6QualOpNameParserRuleCall_8_0; }

		//op="[" "]"
		public Group getGroup_9() { return cGroup_9; }

		//op="["
		public Assignment getOpAssignment_9_0() { return cOpAssignment_9_0; }

		//"["
		public Keyword getOpLeftSquareBracketKeyword_9_0_0() { return cOpLeftSquareBracketKeyword_9_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_9_1() { return cRightSquareBracketKeyword_9_1; }

		//op="{" "}"
		public Group getGroup_10() { return cGroup_10; }

		//op="{"
		public Assignment getOpAssignment_10_0() { return cOpAssignment_10_0; }

		//"{"
		public Keyword getOpLeftCurlyBracketKeyword_10_0_0() { return cOpLeftCurlyBracketKeyword_10_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_1() { return cRightCurlyBracketKeyword_10_1; }
	}

	public class QualPredNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualPredName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cVarParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSortSortParserRuleCall_4_0 = (RuleCall)cSortAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//QualPredName:
		//	"(" "var" Var ":" sort=Sort ")";
		public ParserRule getRule() { return rule; }

		//"(" "var" Var ":" sort=Sort ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//Var
		public RuleCall getVarParserRuleCall_2() { return cVarParserRuleCall_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//sort=Sort
		public Assignment getSortAssignment_4() { return cSortAssignment_4; }

		//Sort
		public RuleCall getSortSortParserRuleCall_4_0() { return cSortSortParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class QualVarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualVarName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPredNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredTypePredTypeParserRuleCall_4_0 = (RuleCall)cPredTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//QualVarName:
		//	"(" "pred" PredName ":" predType=PredType ")";
		public ParserRule getRule() { return rule; }

		//"(" "pred" PredName ":" predType=PredType ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"pred"
		public Keyword getPredKeyword_1() { return cPredKeyword_1; }

		//PredName
		public RuleCall getPredNameParserRuleCall_2() { return cPredNameParserRuleCall_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//predType=PredType
		public Assignment getPredTypeAssignment_4() { return cPredTypeAssignment_4; }

		//PredType
		public RuleCall getPredTypePredTypeParserRuleCall_4_0() { return cPredTypePredTypeParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class QualOpNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualOpName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cOpNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOpTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOpTypeOpTypeParserRuleCall_4_0 = (RuleCall)cOpTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//QualOpName:
		//	"(" "op" OpName ":" opType=OpType ")";
		public ParserRule getRule() { return rule; }

		//"(" "op" OpName ":" opType=OpType ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"op"
		public Keyword getOpKeyword_1() { return cOpKeyword_1; }

		//OpName
		public RuleCall getOpNameParserRuleCall_2() { return cOpNameParserRuleCall_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//opType=OpType
		public Assignment getOpTypeAssignment_4() { return cOpTypeAssignment_4; }

		//OpType
		public RuleCall getOpTypeOpTypeParserRuleCall_4_0() { return cOpTypeOpTypeParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sort");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Sort:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class OpNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//OpName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class PredNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PredName:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Var:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTTokenParserRuleCall_2_2_0 = (RuleCall)cTAssignment_2_2.eContents().get(0);
		
		//Token:
		//	name=ID | num=INT | name=ID "." t=Token;
		public ParserRule getRule() { return rule; }

		//name=ID | num=INT | name=ID "." t=Token
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//num=INT
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_1_0() { return cNumINTTerminalRuleCall_1_0; }

		//name=ID "." t=Token
		public Group getGroup_2() { return cGroup_2; }

		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//t=Token
		public Assignment getTAssignment_2_2() { return cTAssignment_2_2; }

		//Token
		public RuleCall getTTokenParserRuleCall_2_2_0() { return cTTokenParserRuleCall_2_2_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStrAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStrSTRINGTerminalRuleCall_0_0 = (RuleCall)cStrAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		
		//Literal:
		//	str=STRING | num=INT;
		public ParserRule getRule() { return rule; }

		//str=STRING | num=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//str=STRING
		public Assignment getStrAssignment_0() { return cStrAssignment_0; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0_0() { return cStrSTRINGTerminalRuleCall_0_0; }

		//num=INT
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_1_0() { return cNumINTTerminalRuleCall_1_0; }
	}

	public class PlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Place");
		private final Keyword c__Keyword = (Keyword)rule.eContents().get(1);
		
		//Place:
		//	"__";
		public ParserRule getRule() { return rule; }

		//"__"
		public Keyword get__Keyword() { return c__Keyword; }
	}
	
	
	private ModelElements pModel;
	private BasicSpecElements pBasicSpec;
	private BasicItemsElements pBasicItems;
	private SigItemsElements pSigItems;
	private SortItemElements pSortItem;
	private OpItemElements pOpItem;
	private OpTypeElements pOpType;
	private OpAttrElements pOpAttr;
	private OpHeadElements pOpHead;
	private ArgDeclElements pArgDecl;
	private PredItemElements pPredItem;
	private PredTypeElements pPredType;
	private PredHeadElements pPredHead;
	private DatatypeDeclElements pDatatypeDecl;
	private AlternativeElements pAlternative;
	private ComponentElements pComponent;
	private VarDeclElements pVarDecl;
	private FormulaElements pFormula;
	private FormulaAndElements pFormulaAnd;
	private FormulaOrElements pFormulaOr;
	private FormulaImpliesElements pFormulaImplies;
	private FormulaIfElements pFormulaIf;
	private FormulaEquivElements pFormulaEquiv;
	private FormulaUnaryElements pFormulaUnary;
	private QuantifierElements pQuantifier;
	private TermsElements pTerms;
	private TermElements pTerm;
	private MisfixElements pMisfix;
	private MisfixWhenElements pMisfixWhen;
	private MisfixUnaryElements pMisfixUnary;
	private QualPredNameElements pQualPredName;
	private QualVarNameElements pQualVarName;
	private QualOpNameElements pQualOpName;
	private SortElements pSort;
	private OpNameElements pOpName;
	private PredNameElements pPredName;
	private VarElements pVar;
	private TokenElements pToken;
	private LiteralElements pLiteral;
	private PlaceElements pPlace;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public EditorGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.euclideanspace.casl.Editor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	basicSpec=BasicSpec;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//BasicSpec:
	//	basicItems+=BasicItems+ | empty="{" "}";
	public BasicSpecElements getBasicSpecAccess() {
		return (pBasicSpec != null) ? pBasicSpec : (pBasicSpec = new BasicSpecElements());
	}
	
	public ParserRule getBasicSpecRule() {
		return getBasicSpecAccess().getRule();
	}

	//BasicItems:
	//	s=SigItems | => ("free" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?) |
	//	"generated" ("type" | "types") datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"? | "generated" "{"
	//	s2+=SigItems+ "}" ";"? | ("var" | "vars") varDecl=VarDecl (";" varDecl2+=VarDecl)* ";"? | "forall" varDecl=VarDecl
	//	(";" varDecl2+=VarDecl)* "." formula=Formula (";" formula2+=Formula)* ";"?;
	public BasicItemsElements getBasicItemsAccess() {
		return (pBasicItems != null) ? pBasicItems : (pBasicItems = new BasicItemsElements());
	}
	
	public ParserRule getBasicItemsRule() {
		return getBasicItemsAccess().getRule();
	}

	//SigItems:
	//	("sort" | "sorts") sortItem=SortItem (";" sortItem2+=SortItem)* ";"? | ("op" | "ops") opItem=OpItem (";"
	//	opItem2+=OpItem)* ";"? | ("pred" | "preds") predItem=PredItem (";" predItem2+=PredItem)* ";"? | ("type" | "types")
	//	datatypeDecl=DatatypeDecl (";" datatypeDecl2+=DatatypeDecl)* ";"?;
	public SigItemsElements getSigItemsAccess() {
		return (pSigItems != null) ? pSigItems : (pSigItems = new SigItemsElements());
	}
	
	public ParserRule getSigItemsRule() {
		return getSigItemsAccess().getRule();
	}

	//SortItem:
	//	sort=Sort ("," sort2+=Sort)*;
	public SortItemElements getSortItemAccess() {
		return (pSortItem != null) ? pSortItem : (pSortItem = new SortItemElements());
	}
	
	public ParserRule getSortItemRule() {
		return getSortItemAccess().getRule();
	}

	//OpItem:
	//	opName=OpName ("," opName2+=OpName)* ":" opType=OpType ("," opAttr+=OpAttr)* | opName=OpName opHead=OpHead "="
	//	term=Term;
	public OpItemElements getOpItemAccess() {
		return (pOpItem != null) ? pOpItem : (pOpItem = new OpItemElements());
	}
	
	public ParserRule getOpItemRule() {
		return getOpItemAccess().getRule();
	}

	//OpType:
	//	"?"? sort=Sort | sort=Sort ("*" sort2+=Sort)* "?"? "->" sort3=Sort;
	public OpTypeElements getOpTypeAccess() {
		return (pOpType != null) ? pOpType : (pOpType = new OpTypeElements());
	}
	
	public ParserRule getOpTypeRule() {
		return getOpTypeAccess().getRule();
	}

	//OpAttr:
	//	op="assoc" | op="comm" | op="idem" | op="unit" term=Term;
	public OpAttrElements getOpAttrAccess() {
		return (pOpAttr != null) ? pOpAttr : (pOpAttr = new OpAttrElements());
	}
	
	public ParserRule getOpAttrRule() {
		return getOpAttrAccess().getRule();
	}

	//OpHead:
	//	":" "?"? sort=Sort | argDecl=ArgDecl (";" argDecl2+=ArgDecl)* ":" "?"? sort=Sort;
	public OpHeadElements getOpHeadAccess() {
		return (pOpHead != null) ? pOpHead : (pOpHead = new OpHeadElements());
	}
	
	public ParserRule getOpHeadRule() {
		return getOpHeadAccess().getRule();
	}

	//ArgDecl:
	//	var=Var (";" var2+=Var)* ":" sort=Sort;
	public ArgDeclElements getArgDeclAccess() {
		return (pArgDecl != null) ? pArgDecl : (pArgDecl = new ArgDeclElements());
	}
	
	public ParserRule getArgDeclRule() {
		return getArgDeclAccess().getRule();
	}

	//PredItem:
	//	predName=PredName ("," predName2+=PredName)* ":" predType+=PredType | predName=PredName predHead=PredHead? "<=>"
	//	formula=Formula;
	public PredItemElements getPredItemAccess() {
		return (pPredItem != null) ? pPredItem : (pPredItem = new PredItemElements());
	}
	
	public ParserRule getPredItemRule() {
		return getPredItemAccess().getRule();
	}

	//PredType:
	//	sort=Sort ("*" sort2+=Sort)* | b="(" ")";
	public PredTypeElements getPredTypeAccess() {
		return (pPredType != null) ? pPredType : (pPredType = new PredTypeElements());
	}
	
	public ParserRule getPredTypeRule() {
		return getPredTypeAccess().getRule();
	}

	//PredHead:
	//	argDecl=ArgDecl (";" argDecl2+=ArgDecl)*;
	public PredHeadElements getPredHeadAccess() {
		return (pPredHead != null) ? pPredHead : (pPredHead = new PredHeadElements());
	}
	
	public ParserRule getPredHeadRule() {
		return getPredHeadAccess().getRule();
	}

	//DatatypeDecl:
	//	Sort "::=" alternative=Alternative (";" alternative2+=Alternative)*;
	public DatatypeDeclElements getDatatypeDeclAccess() {
		return (pDatatypeDecl != null) ? pDatatypeDecl : (pDatatypeDecl = new DatatypeDeclElements());
	}
	
	public ParserRule getDatatypeDeclRule() {
		return getDatatypeDeclAccess().getRule();
	}

	//Alternative:
	//	opName=OpName (component=Component (";" component2+=Component)* "?"?)?;
	public AlternativeElements getAlternativeAccess() {
		return (pAlternative != null) ? pAlternative : (pAlternative = new AlternativeElements());
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}

	//Component:
	//	(opName=OpName ("," opName2+=OpName)* ":" "?"?) sort=Sort;
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//VarDecl:
	//	var=Var ("," var2+=Var)* ":" sort=Sort;
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	/// *
	//The following LALR(1) rule is converted to xtext format
	//FORMULA ::= QUANTIFIER VAR-DECL ;...; VAR-DECL '.' FORMULA
	//            | FORMULA /\ FORMULA /\.../\ FORMULA
	//            | FORMULA \/ FORMULA \/...\/ FORMULA
	//            | FORMULA => FORMULA
	//            | FORMULA if FORMULA
	//            | FORMULA <=> FORMULA
	//            | not FORMULA
	//            | true | false
	//            | def TERM
	//            | TERM =e= TERM
	//            | TERM = TERM
	//            | (FORMULA)
	//            | MISFIX...MISFIX
	// * / Formula returns Formu:
	//	quantifier=Quantifier varDecl=VarDecl (";" varDecl2+=VarDecl)* "." formula=Formula | formula=FormulaAnd;
	public FormulaElements getFormulaAccess() {
		return (pFormula != null) ? pFormula : (pFormula = new FormulaElements());
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}

	//FormulaAnd returns Formu:
	//	FormulaOr ({FormulaAnd.left=current} op="/\\" right=FormulaOr)*;
	public FormulaAndElements getFormulaAndAccess() {
		return (pFormulaAnd != null) ? pFormulaAnd : (pFormulaAnd = new FormulaAndElements());
	}
	
	public ParserRule getFormulaAndRule() {
		return getFormulaAndAccess().getRule();
	}

	//FormulaOr returns Formu:
	//	FormulaImplies ({FormulaOr.left=current} op="\\/" right=FormulaImplies)*;
	public FormulaOrElements getFormulaOrAccess() {
		return (pFormulaOr != null) ? pFormulaOr : (pFormulaOr = new FormulaOrElements());
	}
	
	public ParserRule getFormulaOrRule() {
		return getFormulaOrAccess().getRule();
	}

	//FormulaImplies returns Formu:
	//	FormulaIf ({FormulaImplies.left=current} op="=>" right=FormulaIf)?;
	public FormulaImpliesElements getFormulaImpliesAccess() {
		return (pFormulaImplies != null) ? pFormulaImplies : (pFormulaImplies = new FormulaImpliesElements());
	}
	
	public ParserRule getFormulaImpliesRule() {
		return getFormulaImpliesAccess().getRule();
	}

	//FormulaIf returns Formu:
	//	FormulaEquiv ({FormulaIf.left=current} op="if" right=FormulaEquiv)?;
	public FormulaIfElements getFormulaIfAccess() {
		return (pFormulaIf != null) ? pFormulaIf : (pFormulaIf = new FormulaIfElements());
	}
	
	public ParserRule getFormulaIfRule() {
		return getFormulaIfAccess().getRule();
	}

	//FormulaEquiv returns Formu:
	//	FormulaUnary ({FormulaEquiv.left=current} op="<=>" right=FormulaUnary)?;
	public FormulaEquivElements getFormulaEquivAccess() {
		return (pFormulaEquiv != null) ? pFormulaEquiv : (pFormulaEquiv = new FormulaEquivElements());
	}
	
	public ParserRule getFormulaEquivRule() {
		return getFormulaEquivAccess().getRule();
	}

	//FormulaUnary returns Formu:
	//	{UnaryExpression} uop="not" expr=Formula | e3="true" | e3="false" | e3="def" t=Term | t=Term "=e=" t2=Term | t=Term
	//	"=" t2=Term | e3="(" form=Formula ")" | misfix=Misfix misfix2+=Misfix*;
	public FormulaUnaryElements getFormulaUnaryAccess() {
		return (pFormulaUnary != null) ? pFormulaUnary : (pFormulaUnary = new FormulaUnaryElements());
	}
	
	public ParserRule getFormulaUnaryRule() {
		return getFormulaUnaryAccess().getRule();
	}

	//Quantifier:
	//	q="forall" | q="exists" | q="exists!";
	public QuantifierElements getQuantifierAccess() {
		return (pQuantifier != null) ? pQuantifier : (pQuantifier = new QuantifierElements());
	}
	
	public ParserRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}

	//Terms:
	//	term=Term ("," term2+=Term)*;
	public TermsElements getTermsAccess() {
		return (pTerms != null) ? pTerms : (pTerms = new TermsElements());
	}
	
	public ParserRule getTermsRule() {
		return getTermsAccess().getRule();
	}

	//Term:
	//	misfix=Misfix misfix2+=Misfix*;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	/// *
	//The following LALR(1) rule is converted to xtext format
	//MISFIX ::= TOKEN | LITERAL | PLACE
	//         | QUAL-PRED-NAME | QUAL-VAR-NAME | QUAL-OP-NAME
	//         | TERM : SORT
	//         | TERM when FORMULA else TERM
	//         | (TERMS)
	//         | [TERMS] | []
	//         | {TERMS} | {}
	// * / Misfix returns Mfix:
	//	MisfixWhen ({Misfix.left=current} op=":" sort=Sort)?;
	public MisfixElements getMisfixAccess() {
		return (pMisfix != null) ? pMisfix : (pMisfix = new MisfixElements());
	}
	
	public ParserRule getMisfixRule() {
		return getMisfixAccess().getRule();
	}

	//MisfixWhen returns Mfix:
	//	MisfixUnary ({MisfixWhen.left=current} op="when" formula=Formula op0="when" right=MisfixUnary)?;
	public MisfixWhenElements getMisfixWhenAccess() {
		return (pMisfixWhen != null) ? pMisfixWhen : (pMisfixWhen = new MisfixWhenElements());
	}
	
	public ParserRule getMisfixWhenRule() {
		return getMisfixWhenAccess().getRule();
	}

	//MisfixUnary returns Mfix:
	//	"(" misfix=Misfix ")" | "[" misfix=Misfix "]" | "{" misfix=Misfix "}" | op1=Token | op2=Literal | op3=Place |
	//	op4=QualPredName | op5=QualVarName | op6=QualOpName | op="[" "]" | op="{" "}";
	public MisfixUnaryElements getMisfixUnaryAccess() {
		return (pMisfixUnary != null) ? pMisfixUnary : (pMisfixUnary = new MisfixUnaryElements());
	}
	
	public ParserRule getMisfixUnaryRule() {
		return getMisfixUnaryAccess().getRule();
	}

	//QualPredName:
	//	"(" "var" Var ":" sort=Sort ")";
	public QualPredNameElements getQualPredNameAccess() {
		return (pQualPredName != null) ? pQualPredName : (pQualPredName = new QualPredNameElements());
	}
	
	public ParserRule getQualPredNameRule() {
		return getQualPredNameAccess().getRule();
	}

	//QualVarName:
	//	"(" "pred" PredName ":" predType=PredType ")";
	public QualVarNameElements getQualVarNameAccess() {
		return (pQualVarName != null) ? pQualVarName : (pQualVarName = new QualVarNameElements());
	}
	
	public ParserRule getQualVarNameRule() {
		return getQualVarNameAccess().getRule();
	}

	//QualOpName:
	//	"(" "op" OpName ":" opType=OpType ")";
	public QualOpNameElements getQualOpNameAccess() {
		return (pQualOpName != null) ? pQualOpName : (pQualOpName = new QualOpNameElements());
	}
	
	public ParserRule getQualOpNameRule() {
		return getQualOpNameAccess().getRule();
	}

	//Sort:
	//	name=ID;
	public SortElements getSortAccess() {
		return (pSort != null) ? pSort : (pSort = new SortElements());
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}

	//OpName:
	//	name=ID;
	public OpNameElements getOpNameAccess() {
		return (pOpName != null) ? pOpName : (pOpName = new OpNameElements());
	}
	
	public ParserRule getOpNameRule() {
		return getOpNameAccess().getRule();
	}

	//PredName:
	//	name=ID;
	public PredNameElements getPredNameAccess() {
		return (pPredName != null) ? pPredName : (pPredName = new PredNameElements());
	}
	
	public ParserRule getPredNameRule() {
		return getPredNameAccess().getRule();
	}

	//Var:
	//	name=ID;
	public VarElements getVarAccess() {
		return (pVar != null) ? pVar : (pVar = new VarElements());
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//Token:
	//	name=ID | num=INT | name=ID "." t=Token;
	public TokenElements getTokenAccess() {
		return (pToken != null) ? pToken : (pToken = new TokenElements());
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//Literal:
	//	str=STRING | num=INT;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//Place:
	//	"__";
	public PlaceElements getPlaceAccess() {
		return (pPlace != null) ? pPlace : (pPlace = new PlaceElements());
	}
	
	public ParserRule getPlaceRule() {
		return getPlaceAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"%{"->"}%";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"%%" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
